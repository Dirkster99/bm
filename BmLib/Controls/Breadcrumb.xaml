<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"

    xmlns:ctrls="clr-namespace:BmLib.Controls"
    xmlns:uc="clr-namespace:BmLib.Controls.Breadcrumbs"
                    
    xmlns:conv="clr-namespace:BmLib.Converters"
    xmlns:reskeys="clr-namespace:BmLib.Themes"
    xmlns:behav="clr-namespace:BmLib.Behaviors"
    xmlns:sbox="clr-namespace:SuggestLib;assembly=SuggestLib"
   >
    <ResourceDictionary.MergedDictionaries>
        <!-- Define the style of the switch control inside the Breadcrumb control -->
        <ResourceDictionary Source="/BmLib;component/Controls/BreadcrumbSwitchStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>
    
    <Style TargetType="{x:Type ctrls:Breadcrumb}">
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlBorderBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <!-- MinWidth assures nice Breadcrumb display when UI gets too small
             because Window may be resized to a small portion of its normal size -->
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="21" />
        <Setter Property="SwitchStyle" Value="{StaticResource {x:Static reskeys:ResourceKeys.BreadcrumbSwitchStyleKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrls:Breadcrumb}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            MinWidth="{TemplateBinding MinWidth}"
                            MinHeight="{TemplateBinding MinHeight}"
                            >
                        <Grid>
                            <Grid.Resources>
                                <conv:BoolToVisibilityPropConverter x:Key="btv1" FalseValue="Visible" TrueValue="Hidden"/>
                                <conv:BoolToVisibilityCollapsedConverter x:Key="btv" />
                                <conv:FlipBoolConverter x:Key="fb" />
                            </Grid.Resources>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            
                            <!-- Progress Bar and Switch Control with Breadcrumb Tree and TextBox input -->
                            <Grid HorizontalAlignment="Stretch"
                                  VerticalAlignment="Stretch"
                                  Margin="0"
                            >
                                <Grid.ColumnDefinitions>
                                    <!-- This needs to be * because OverflowableStackpanel inside
                                     Switch inside BreadCrumbTree cannot function when this is set to Auto
                
                                     -> Defect: The items in the BreadcrumbTree will no longer overflow
                                                (disappear when space is limited).
                                -->
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <!-- Show a progress-bar to indicate long running processing -->
                                <ProgressBar DataContext="{TemplateBinding Progressing}"
                                    IsIndeterminate="{Binding IsIndeterminate, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"
                                    Value="{Binding ProgressValue, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"
                                    Minimum="{Binding MinimumProgressValue, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"
                                    Maximum="{Binding MaximumProgressValue, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"
                                    Visibility="{Binding IsProgressbarVisible, Mode=OneWay,UpdateSourceTrigger=PropertyChanged, Converter={StaticResource btv}}"
                                    Style="{DynamicResource {x:Static reskeys:ResourceKeys.BreadcrumbProgressBarStyleKey}}"
                                    Height="3"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Bottom"
                                />

                                <ctrls:Switch x:Name="PART_Switch"
                                        Header="{TemplateBinding SwitchHeader}"
                                        Style="{StaticResource {x:Static reskeys:ResourceKeys.BreadcrumbSwitchStyleKey}}"
                                        IsSwitchOn="{Binding IsSwitchOn,RelativeSource={RelativeSource AncestorType={x:Type ctrls:Breadcrumb}},Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
                                        VerticalAlignment="Center" VerticalContentAlignment="Center"
                                        HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch"
                                        CanSwitchContent="{TemplateBinding IsSwitchEnabled}"
                                        SwitchContentCommand="{Binding SwitchCommand,RelativeSource={RelativeSource AncestorType={x:Type ctrls:Breadcrumb}},Mode=OneTime}"
                                        Padding="0"
                                        Margin="{TemplateBinding Padding}"
                                     >
                                    <ctrls:Switch.ContentOn>
                                        <!-- Show TreeView with RootDropDown Items -->
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding OverflowGap}" />
                                            </Grid.ColumnDefinitions>

                                            <!-- Displays a root toggle button with a (root/overflow) dropdown list
                                                 at the 2nd left most button in the control -->
                                            <ctrls:DropDownList Grid.Column="0"
                                                                x:Name="PART_RootDropDownList"
                                                                VerticalAlignment="Stretch" 
                                                                ItemsSource="{TemplateBinding RootDropDownItemsSource}"
                                                                SelectedValuePath="{TemplateBinding RootDropDownSelectedValuePath}"
                                                                SelectedValue="{Binding RootDropDownSelectedValue,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,RelativeSource={RelativeSource AncestorType={x:Type ctrls:Breadcrumb}}}"
                                                                ItemTemplate="{TemplateBinding DropDownListItemDataTemplate}"
                                                                ItemContainerStyle="{TemplateBinding RootDropDownListItemContainerStyle}"
                                                                Header="{TemplateBinding RootDropDownListHeader}"
                                                                HorizontalAlignment="Left"
                                                                behav:SelectionChangedCommand.ChangedCommand="{TemplateBinding RootDropDownSelectionChangedCommand}"
                                                                Margin="0"
                                                                Padding="0"
                                                            />

                                            <!-- The BreadcrumbTree control displays the complete path and each drop down list -->
                                            <uc:BreadcrumbTree Grid.Column="1"
                                                               x:Name="PART_BreadcrumbTree"
                                                               Margin="0"
                                                               Padding="0"
                                                               DropDownListItemDataTemplate="{TemplateBinding DropDownListItemDataTemplate}"
                                                               ItemsSource="{TemplateBinding TreeItemsSource}"
                                                               ItemTemplate="{TemplateBinding TreeItemTemplate}"
                                                               ItemContainerStyle="{TemplateBinding TreeItemContainerStyle}"
                                                               VerticalAlignment="Stretch"
                                                               />

                                            <!-- Grid.Column="2" Is OverflowGap which is necessary to reach Switch
                                                 through click on right-most background of BreadcrumbTree -->
                                        </Grid>
                                    </ctrls:Switch.ContentOn>
                                    <ctrls:Switch.ContentOff>
                                        <Grid>
                                            <sbox:SuggestBox
                                                  x:Name="PART_SuggestBox"
                                                  Visibility="{Binding IsSwitchOn, RelativeSource={RelativeSource AncestorType=ctrls:Switch}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource btv1}}"
                                                  BorderThickness="0"
                                                  BorderBrush="Transparent"
                                                  Margin="0" Padding="0"
                                                  FontFamily="{TemplateBinding FontFamily}"
                                                  FontSize="{TemplateBinding FontSize}"
                                                  Text="{Binding SuggestedPath, UpdateSourceTrigger=Explicit}"
                                                  IsEnabled="{Binding EnableBreadcrumb, Mode=OneWay, Converter={StaticResource fb}}"
                                                
                                                  SuggestSources="{Binding SuggestSources}"
                                                  EnableSuggestions="{Binding ElementName=PART_Switch,Path=IsSwitchOn,Converter={StaticResource fb}}"

                                                  HierarchyHelper="{x:Null}"
                                                  DisplayMemberPath="Header"
                                                  ValuePath="TextPath"
                                                >
                                            </sbox:SuggestBox>

                                        </Grid>
                                    </ctrls:Switch.ContentOff>
                                </ctrls:Switch>
                            </Grid>

                            <!-- Cancel/Refesh Buttons -->
                            <Grid Grid.Column="1">
                                <Grid.Resources>
                                    <conv:BoolToVisibilityPropConverter x:Key="BoolToVisibilityConverter"/>
                                    <conv:BoolToVisibilityPropConverter x:Key="BoolToVisibilityConverterNeg" TrueValue="Collapsed" FalseValue="Visible" />
                                </Grid.Resources>

                                <Grid Visibility="{Binding ElementName=PART_Switch, Path=IsSwitchOn,Converter={StaticResource BoolToVisibilityConverterNeg},UpdateSourceTrigger=PropertyChanged,Mode=OneWay}">
                                    <!-- Cancel Suggestions Button -->
                                    <Button x:Name="PART_CancelSuggestion"
                                        Style="{DynamicResource {x:Static reskeys:ResourceKeys.RefreshCancel_ButtonStyle}}"
                                        DataContext="{TemplateBinding TaskQueueProcessing}"
                                        Visibility="{Binding ElementName=PART_Switch, Path=IsSwitchOn,Converter={StaticResource BoolToVisibilityConverterNeg},UpdateSourceTrigger=PropertyChanged,Mode=OneWay}"                                        
                                        ToolTip="Cancel Editing (Esc)"
                                        Margin="3" Padding="0"
                                    >
                                        <Button.Background>
                                            <ImageBrush ImageSource="{DynamicResource {x:Static reskeys:ResourceKeys.ICON_Close}}"/>
                                        </Button.Background>
                                    </Button>
                                </Grid>
                               
                                <Grid Visibility="{Binding ElementName=PART_Switch, Path=IsSwitchOn,Converter={StaticResource BoolToVisibilityConverter},UpdateSourceTrigger=PropertyChanged,Mode=OneWay}">
                                    <!-- Right most buttons when Switch is Off (BreadcrumbTree is visible) -->
                                    <!-- Button Overlay for Refresh and Cancel Button (only one should be visible at any time) -->
                                    <Button Name="RefreshButton"
                                        Style="{DynamicResource {x:Static reskeys:ResourceKeys.RefreshCancel_ButtonStyle}}"
                                        DataContext="{TemplateBinding TaskQueueProcessing}"
                                        Visibility="{Binding IsProcessCancelable,Converter={StaticResource BoolToVisibilityConverterNeg},UpdateSourceTrigger=PropertyChanged,Mode=OneWay}"
                                        ToolTip="Refresh"
                                        Margin="3" Padding="0"
                                        >
                                        <Button.Background>
                                            <ImageBrush ImageSource="{DynamicResource {x:Static reskeys:ResourceKeys.ICON_Refresh}}"/>
                                        </Button.Background>
                                    </Button>

                                    <Button Name="CancelButton"
                                        Style="{DynamicResource {x:Static reskeys:ResourceKeys.RefreshCancel_ButtonStyle}}"
                                        DataContext="{TemplateBinding TaskQueueProcessing}"
                                        Command="{Binding CancelProcess,UpdateSourceTrigger=PropertyChanged,Mode=OneWay}"
                                        IsEnabled="{Binding IsProcessCancelable,UpdateSourceTrigger=PropertyChanged,Mode=OneWay}"
                                        Visibility="{Binding IsProcessCancelable,Converter={StaticResource BoolToVisibilityConverter},UpdateSourceTrigger=PropertyChanged,Mode=OneWay}"
                                        ToolTip="Cancel"
                                        Margin="3" Padding="0"
                                        >
                                        <Button.Background>
                                            <ImageBrush ImageSource="{DynamicResource {x:Static reskeys:ResourceKeys.ICON_Close}}"/>
                                        </Button.Background>
                                    </Button>
                                </Grid>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlDisabledBackgroundKey}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlDisabledBorderKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlAccentBrushKey}}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>