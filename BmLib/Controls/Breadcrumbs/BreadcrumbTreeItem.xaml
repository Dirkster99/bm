<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"

    xmlns:ctrls="clr-namespace:BmLib.Controls"
    xmlns:uc="clr-namespace:BmLib.Controls.Breadcrumbs"
    xmlns:conv="clr-namespace:BmLib.Converters"
    xmlns:reskeys="clr-namespace:BmLib.Themes"
    xmlns:behav="clr-namespace:BmLib.Behaviors"
 >
    <!-- Defines the default style which is loaded through Themes/Generic.xaml
         via style key property registered in static constructor -->
    <Style TargetType="{x:Type uc:BreadcrumbTreeItem}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlBorderBrushKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type uc:BreadcrumbTreeItem}">
                    <!-- The orientation in this panel layouts sub-items horizontally -->
                    <ctrls:OverflowableStackPanel HorizontalAlignment="Stretch"
                                                  Orientation="Horizontal" 
                                                  OverflowItemCount="{Binding OverflowItemCount, RelativeSource={RelativeSource TemplatedParent}
                                                                 , Mode=OneWayToSource}" >
                        <ctrls:HotTrack x:Name="headerHL"
                                        ctrls:OverflowableStackPanel.CanOverflow="True"
                                        SelectedBorderBrush="{TemplateBinding BorderBrush}"
                                        MaxWidth="1000"
                                        BorderThickness="0"
                                        >
                            <Grid Background="Transparent">
                                <Grid.Resources>
                                    <conv:BoolToVisibilityPropConverter TrueValue="Visible" FalseValue="Collapsed" x:Key="BoolToVisibilityConverter" />
                                </Grid.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                
                                <Button Grid.Column="0" x:Name="PART_CaptionButton"
                                        Template="{DynamicResource {x:Static reskeys:ResourceKeys.BaseButton}}"
                                        MaxWidth="1000"
                                        Margin="0"
                                        Padding="0"
                                        Command="{TemplateBinding ClickItemCommand}"
                                    >
                                    <ContentPresenter x:Name="PART_Header"
                                                      HorizontalAlignment="Stretch"
                                                      VerticalAlignment="Stretch"                                   
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                      ContentSource="Header" />
                                </Button>
                                
                                <ctrls:DropDownList x:Name="PART_Toggle"
                                                    Grid.Column="1"
                                                    Margin="0"
                                                    Padding="0"
                                                    ItemsSource="{TemplateBinding ItemsSource}"
                                                    Visibility="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}" 
                                                    SelectedValuePath="{Binding ValuePath, RelativeSource={RelativeSource TemplatedParent}}"                                  
                                                    SelectedValue="{Binding SelectedChild, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}}"
                                                    IsDropDownOpen="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                    ItemTemplate="{TemplateBinding DropDownListItemDataTemplate}"
                                                    behav:SelectionChangedCommand.ChangedCommand="{Binding Path=DropDownItemSelectedCommand}"
                                    />
                            </Grid>
                        </ctrls:HotTrack>

                        <ItemsPresenter x:Name="ItemsHost" />
                    </ctrls:OverflowableStackPanel>
                    <ControlTemplate.Triggers>
                        <MultiTrigger >
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChildSelected" Value="false" />
                                <Condition Property="IsCurrentSelected" Value="false" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Style.Triggers>
            -This trigger is needed, because RelativeSource binding can only succeed if the current item is already connected to its visual parent-
            <Trigger Property="IsVisible" Value="True">
                <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            </Trigger>
        </Style.Triggers-->
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="True">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
