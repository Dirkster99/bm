<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:SuggestLib"
                    xmlns:reskeys="clr-namespace:SuggestLib.Themes"
                    >

    <!-- =============================================================================== -->
    <!-- SuggestComboBox Template                                                      -->
    <!-- =============================================================================== -->
    <ControlTemplate x:Key="SuggestComboBoxTemplate" TargetType="{x:Type local:SuggestComboBox}">
        <Grid>
            <Border x:Name="ControlBorder"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    Background="{TemplateBinding Background}">
                <Grid x:Name="templateRoot"
                      SnapsToDevicePixels="True">

                    <!-- Place Popup below button to the left
                         https://stackoverflow.com/questions/5340640/wpf-combobox-popup-placement-bottom-and-aligned-to-the-right-edge
                    -->
                    <Popup x:Name="PART_Popup" AllowsTransparency="True"
                           Grid.ColumnSpan="2"
                           IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                           Margin="0"
                           PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"

                           Placement="Left"
                           VerticalOffset="{TemplateBinding ActualHeight}" 
                           HorizontalOffset="{TemplateBinding ActualWidth}"
                           Width="{TemplateBinding PopUpWidth}"
                           >
                        <Border x:Name="DropDownBorder"
                                BorderThickness="1"
                                BorderBrush="{DynamicResource {x:Static reskeys:ResourceKeys.PopUpControlNormalBorderKey}}" 
                                Background="{DynamicResource {x:Static reskeys:ResourceKeys.PopUpControlNormalBackgroundKey}}">
                            <Grid x:Name="DropDown"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <ScrollViewer Focusable="False"
                                              CanContentScroll="True"
                                              ScrollViewer.HorizontalScrollBarVisibility="Auto"
                                              ScrollViewer.VerticalScrollBarVisibility="Auto">
                                    <Grid x:Name="grid">
                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                        />
                                    </Grid>
                                </ScrollViewer>
                            </Grid>
                        </Border>
                    </Popup>
                    <Button BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding ButtonBackground}"
                            HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Command="{TemplateBinding ToggleRecentListCommand}"
                            CommandParameter="{TemplateBinding ToggleRecentListCommandParameter}"
                            Style="{DynamicResource {x:Static reskeys:ResourceKeys.HistoryButtonStyleKey}}"
                            Content="{TemplateBinding ButtonContent}"
                            MinWidth="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" 
                            MinHeight="{Binding ActualWidth, RelativeSource={RelativeSource Self}}"
                        />
                </Grid>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Height" TargetName="DropDownBorder" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True" />
                    <!--<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />-->
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Padding" Value="2" />
                <!-- Setter Property="Visibility" Value="Visible" TargetName="Border" / -->
                <!-- Setter Property="Visibility" Value="Collapsed" TargetName="contentPresenter" / -->
            </Trigger>

            <!-- Control is editable but NOT enabled -->
            <!-- MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="True" />
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" TargetName="Border" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlDisabledBackgroundKey}}" />
                </MultiTrigger.Setters>
            </MultiTrigger -->

            <!-- MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="Text" Value="" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible" />
                </MultiTrigger.Setters>
            </MultiTrigger -->

            <!-- MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter TargetName="ControlBorder" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlItemBorderSelectedKey}}" />
                    <Setter TargetName="ControlBorder" Property="BorderThickness" Value="1" />
                </MultiTrigger.Setters>
            </MultiTrigger -->
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- =============================================================================== -->
    <!-- SuggestComboBox Style                                                           -->
    <!-- =============================================================================== -->
    <Style x:Key="SuggestComboBoxStyle" TargetType="{x:Type local:SuggestComboBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlNormalForegroundBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="Template" Value="{StaticResource SuggestComboBoxTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="ButtonContent">
            <Setter.Value>
                <TextBlock FontFamily="Segoe UI Symbol"
                                       Text="&#xE0E5;"
                                       VerticalAlignment="Center" HorizontalAlignment="Left"/>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                    <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                    <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                    <Setter Property="Padding" Value="7,2,8,2"/>
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                <Border Name="Bd"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Padding="{TemplateBinding Padding}"
                                        SnapsToDevicePixels="true">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>

                                        <ContentPresenter
                                            Grid.Column="1"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <!-- Show selected item as selected until another item is selected -->
                                        <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlItemBackgroundSelectedKey}}"/>
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlItemTextSelectedKey}}"/>
                                    </Trigger>
                                    <Trigger Property="IsHighlighted" Value="true">
                                        <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlItemBackgroundSelectedKey}}"/>
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlItemTextSelectedKey}}"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Foreground" Value="{DynamicResource ItemTextDisabled}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:SuggestComboBox}" BasedOn="{StaticResource SuggestComboBoxStyle}" />

</ResourceDictionary>